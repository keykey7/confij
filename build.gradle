buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.cinnober.gradle:semver-git:2.4.0'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
	}
}

plugins {
	id 'net.ltgt.apt-idea' version '0.19'
	id 'com.github.ben-manes.versions' version '0.20.0'
}

def isCiBuild = System.getenv('CI') != null
if (isCiBuild) {
	ext.snapshotSuffix = "rc.<count><dirty>"
	ext.dirtyMarker = "-SNAPSHOT"
	apply plugin: 'com.cinnober.gradle.semver-git'
} else {
	project.version = "0.0.0-SNAPSHOT"
}

allprojects {
	repositories {
		jcenter()

		maven { url 'http://ci.hibernate.org/plugin/repository/project/hibernate-validator-master/LastSuccessful/repository' }
		// broken by hibernate. We therefore use a custom (idiotic) ivy repo pattern to get a snapshot version
		ivy {
			url 'http://ci.hibernate.org/plugin/repository/project/hibernate-validator-master/LastSuccessful/repository'
			layout 'pattern' , {
				layout 'pattern', {
					m2compatible = true
					artifact '[organisation]/[module]/[revision]/[artifact]-[revision](.[ext])'
				}
			}
		}
	}
	apply plugin: 'idea'
	group 'ch.kk7'
	version rootProject.version
	dependencyUpdates.revision = 'release'
}

subprojects {
	apply plugin: 'java-library'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	dependencies {
		// TODO: upgrade: https://github.com/google/auto/pull/657
		def autoServiceVersion = "1.0-rc4"
		compileOnly "com.google.auto.service:auto-service:${autoServiceVersion}"
		annotationProcessor "com.google.auto.service:auto-service:${autoServiceVersion}"
		testCompileOnly "com.google.auto.service:auto-service:${autoServiceVersion}"
		testAnnotationProcessor "com.google.auto.service:auto-service:${autoServiceVersion}"

		def lombokVersion = "1.18.4"
		compileOnly "org.projectlombok:lombok:${lombokVersion}"
		annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
		testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
		testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

		def junitVersion = '5.3.1'
		testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
		testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
		testImplementation('org.junit-pioneer:junit-pioneer:0.3.0') {
			exclude group: 'org.junit.jupiter'
		}
		testImplementation "org.assertj:assertj-core:3.11.1"
	}

	test {
		// junit5 support
		useJUnitPlatform()
	}
}

wrapper {
	gradleVersion = '4.10.2'
	distributionType = Wrapper.DistributionType.ALL
}

// coverage
subprojects {
	apply plugin: 'jacoco'
}

apply plugin: 'base'
apply plugin: 'jacoco'
task jacocoMerge(type: JacocoMerge) {
	subprojects.each { subproject ->
		executionData subproject.tasks.withType(Test)
	}
	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
	description = 'Generates an aggregate report from all subprojects'
	dependsOn subprojects.test, jacocoMerge

	additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData jacocoMerge.destinationFile

	doLast {
		logger.lifecycle("report at: " + reports.html.entryPoint.toURI())
	}
}

// releases
subprojects {
	if (sourceSets.main.allSource.isEmpty()) {
		return // excluding test-only subprojects
	}

	apply plugin: 'maven-publish'
	ext {
		confijDescription = "A type-safe, strongly defined Java configuration library"
		confijGithub = "keykey7/confij"
		confijUrl = "https://github.com/${confijGithub}"
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	javadoc {
		options.addStringOption('Xdoclint:none', '-quiet')
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = project.name
					description = project.confijDescription
					url = "" + project.confijUrl
					licenses {
						license {
							name = 'The Apache License, Version 2.0'
							url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}
				}
			}
		}
	}

	// bintray
	apply plugin: 'com.jfrog.bintray'
	def isReleaseBuild = project.version.matches("[0-9.]+") // no "rc" or "snapshot"
	bintray {
		user = 'kk7'
		key = System.getenv('BINTRAY_TOKEN')
		publications = publications = project.publishing.publications.collect{ it.name }
		publish = isReleaseBuild

		pkg {
			repo = isReleaseBuild ? 'mvn-release' : 'mvn-snapshot'
			name = project.name
			desc = project.confijDescription

			websiteUrl = project.confijUrl
			vcsUrl = project.confijUrl
			githubRepo = project.confijGithub
			licenses = ['Apache-2.0']
			labels = ['configuration']
			version {
				name = project.version
				released = new Date()
				mavenCentralSync {
					sync = false
				}
			}
		}
	}

	bintrayUpload {
		dependsOn publishToMavenLocal
		doFirst {
			Objects.requireNonNull(apiKey, 'missing bintray token')
		}
	}
	publish.dependsOn bintrayUpload
}
