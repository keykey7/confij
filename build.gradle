buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
}

plugins {
	id 'net.ltgt.apt-idea' version '0.19'
	id 'com.github.ben-manes.versions' version '0.20.0'
	id 'org.asciidoctor.convert' version '1.5.9.1' apply false
}

allprojects {
	repositories {
		jcenter()

		maven { url 'http://ci.hibernate.org/plugin/repository/project/hibernate-validator-master/LastSuccessful/repository' }
		// broken by hibernate. We therefore use a custom (idiotic) ivy repo pattern to get a snapshot version
		ivy {
			url 'http://ci.hibernate.org/plugin/repository/project/hibernate-validator-master/LastSuccessful/repository'
			layout 'pattern' , {
				layout 'pattern', {
					m2compatible = true
					artifact '[organisation]/[module]/[revision]/[artifact]-[revision](.[ext])'
				}
			}
		}
	}
	apply plugin: 'idea'
	group 'ch.kk7'
	version '0.0.0-SNAPSHOT'

	dependencyUpdates.revision = 'release'
}

subprojects {
	apply plugin: 'java-library'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	dependencies {
		// TODO: upgrade: https://github.com/google/auto/pull/657
		compileOnly 'com.google.auto.service:auto-service:1.0-rc4'
		annotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'
		compileOnly 'org.projectlombok:lombok:1.18.2'
		annotationProcessor 'org.projectlombok:lombok:1.18.2'

		testImplementation "org.assertj:assertj-core:3.11.1"
		def junitVersion = '5.3.1'
		testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
		testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
		testImplementation('org.junit-pioneer:junit-pioneer:0.2.2') {
			exclude group: 'org.junit.jupiter'
		}
	}

	test {
		// junit5 support
		useJUnitPlatform()
	}
}

wrapper {
	gradleVersion = '4.10.2'
	distributionType = Wrapper.DistributionType.ALL
}

// coverage
subprojects {
	apply plugin: 'jacoco'
}

apply plugin: 'base'
apply plugin: 'jacoco'
task jacocoMerge(type: JacocoMerge) {
	subprojects.each { subproject ->
		executionData subproject.tasks.withType(Test)
	}
	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
	description = 'Generates an aggregate report from all subprojects'
	dependsOn subprojects.test, jacocoMerge

	additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData jacocoMerge.destinationFile

	doLast {
		logger.lifecycle("report at: " + reports.html.entryPoint.toURI())
	}
}
